/**
 * Evaluation Dimension (original interface, maintaining compatibility)
 */
export interface EvaluationDimension {
	/** Dimension name */
	name: string;
	/** Dimension weight (0-1) */
	weight: number;
	/** Dimension description */
	description: string;
	/** Evaluation criteria */
	criteria: string[];
	/** Evaluation method */
	evaluationMethod?: string;
	/** Importance description */
	importance?: string;
}

/**
 * Task Analysis Result
 */
export interface TaskAnalysis {
	/** Extracted core task */
	coreTask: string;
	/** Task name for file naming (generated by LLM) */
	taskName: string;
	/** Task type */
	taskType: string;
	/** Task complexity (1-5) */
	complexity: number;
	/** Task domain */
	domain: string;
	/** Key elements */
	keyElements: string[];
	/** Task objectives */
	objectives: string[];
}

/**
 * Time Context Information
 */
export interface TimeContext {
	/** Current timestamp */
	timestamp: number;
	/** Formatted time string */
	formattedTime: string;
	/** Timezone information */
	timezone: string;
	/** Year */
	year: number;
	/** Month */
	month: number;
	/** Day */
	day: number;
	/** Day of week */
	weekday: string;
}

/**
 * Quality Evaluation Result
 */
export interface QualityEvaluationResult {
	/** Analyzed task */
	task: TaskAnalysis;
	/** Time context */
	timeContext: TimeContext;
	/** Generated evaluation dimensions */
	evaluationDimensions: EvaluationDimension[];
	/** Generation time */
	generatedAt: string;
	/** Framework version */
	frameworkVersion: string;
}

/**
 * Conversation Analysis Input
 */
export interface ConversationInput {
	/** User message */
	userMessage: string;
	/** Conversation history (optional) */
	conversationHistory?: Array<{
		role: 'user' | 'assistant';
		content: string;
		timestamp?: number;
	}>;
	/** Context information (optional) */
	context?: Record<string, unknown>;
}

/**
 * Tool Call Parameters
 */
export interface GenerateEvaluationParams {
	/** Conversation input */
	conversation: ConversationInput;
	/** Whether to include detailed analysis */
	includeDetailedAnalysis?: boolean;
	/** Custom evaluation framework */
	customFramework?: string;
	/** Specific domain preference */
	domainPreference?: string;
}

/**
 * Project File Information
 */
export interface ProjectFile {
	/** Relative path */
	relativePath: string;
	/** Full path */
	fullPath: string;
	/** File content */
	content: string;
	/** File size (character count) */
	size: number;
	/** File extension */
	extension: string;
	/** Line count */
	lines: number;
}

/**
 * Comprehensive Project Data
 */
export interface ProjectData {
	/** Project file list */
	files: ProjectFile[];
	/** Project directory structure */
	structure: string;
	/** Total file count */
	fileCount: number;
	/** Total size (character count) */
	totalSize: number;
	/** Total line count */
	totalLines: number;
}

/**
 * Dimension Score Result
 */
export interface DimensionScore {
	/** Dimension name */
	dimensionName: string;
	/** Score (0-100) */
	score: number;
	/** Score grade */
	grade: 'A+' | 'A' | 'B+' | 'B' | 'C+' | 'C' | 'D' | 'F';
	/** Score reason */
	reason: string;
	/** Specific performance analysis */
	performanceAnalysis: string;
	/** Improvement suggestions */
	improvementSuggestions: string[];
	/** Benchmark comparison */
	benchmarkComparison?: string;
}

/**
 * Task Evaluation Input Parameters
 */
export interface EvaluateTaskParams {
	/** Original task description */
	originalTask: string;
	/** LLM completed work content */
	completedWork: string;
	/** Previously generated evaluation framework */
	evaluationFramework?: QualityEvaluationResult;
	/** Or parameters to regenerate evaluation framework */
	generateFramework?: {
		conversation: ConversationInput;
		domainPreference?: string;
		customFramework?: string;
	};
	/** Evaluation configuration */
	evaluationConfig?: {
		strictness: 'lenient' | 'standard' | 'strict';
		focusAreas?: string[];
		includeActionPlan: boolean;
		detailLevel: 'basic' | 'standard' | 'comprehensive';
	};
}

/**
 * Second Feature: Scoring Input Parameters
 */
export interface EvaluateTaskParams2 {
	/** Original evaluation dimensions (from first feature) */
	evaluationDimensions: EvaluationDimension[];
	/** LLM completed task content */
	completedTask: {
		/** Task content or output */
		content: string;
		/** Original task description (optional) */
		originalTask?: string;
		/** Task type */
		taskType?: string;
		/** Completion time */
		completedAt?: string;
		/** Additional context information */
		context?: Record<string, unknown>;
	};
	/** Scoring standard (0-10 scale, 5 dimensions Ã— 2 points) */
	scaleType?: '0-10-simplified';
	/** Whether to provide detailed improvement suggestions */
	includeImprovementSuggestions?: boolean;
}

/**
 * Comprehensive Evaluation Result (output of second feature)
 */
export interface TaskEvaluationResult {
	/** Task basic information */
	taskInfo: {
		originalTask: string;
		completedContent: string;
		evaluatedAt: string;
		scaleType: '1-5' | '1-10';
	};
	/** Dimension scores */
	dimensionScores: DimensionScore[];
	/** Overall score statistics */
	overallScore: {
		/** Weighted total score */
		totalScore: number;
		/** Maximum possible score */
		maxPossibleScore: number;
		/** Percentage score */
		percentageScore: number;
		/** Grade evaluation */
		grade: 'A+' | 'A' | 'B+' | 'B' | 'C+' | 'C' | 'D' | 'F';
		/** Whether passed */
		passed: boolean;
	};
	/** Comprehensive analysis */
	analysis: {
		/** Main strengths */
		mainStrengths: string[];
		/** Main weaknesses */
		mainWeaknesses: string[];
		/** Priority improvement suggestions */
		prioritySuggestions: string[];
		/** Next action recommendations */
		nextActions: string[];
	};
	/** Framework version */
	frameworkVersion: string;
}